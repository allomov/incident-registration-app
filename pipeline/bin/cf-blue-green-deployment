#!/usr/bin/env bash

# Blue-green deployment script. Usage:
#
#   ./cf-blue-green-deployment <app-manifest>

set -e
set -o pipefail
set -x

if  [ -z "$cf_api" ] || [ -z "$cf_username" ] || [ -z "$cf_password" ] || \
	[ -z "$cf_org" ] || [ -z "$cf_space" ] || [ -z "$app_name" ] || [ -z "$app_folder" ]; then
	echo "You need to define following environment variables: "
	echo
	echo "    cf_api, cf_username, cf_password, cf_org, cf_space, app_name, app_folder"
	echo
	exit 1
fi

app_manifest=$1
echo
echo app_manifest
echo $app_manifest
echo
echo
echo $(env)


cf api --skip-ssl-validation $cf_api
cf login -u $cf_username -p $cf_password -o $cf_org -s $cf_space

if [ $# -ne 1 ]; then
	echo "Usage:\n\n\t./cf-blue-green-deployment <cf-api> <cf-username> <cf-password> <cf-org> <cf-space> <app-folder> <app-manifest>\n"
	exit 1
fi

BLUE=$app_name
GREEN="${BLUE}-green-version"

finally ()
{
  # we don't want to keep the sensitive information around
  rm $MANIFEST
}

on_fail () {
  finally
  echo "DEPLOY FAILED - you may need to check 'cf apps' and 'cf routes' and do manual cleanup"
}


# pull the up-to-date manifest from the BLUE (existing) application
MANIFEST=$(mktemp -t "${BLUE}_manifest.XXXXXXXXXX")
cf create-app-manifest $BLUE -p $MANIFEST

# set up try/catch
# http://stackoverflow.com/a/185900/358804
trap on_fail ERR

DOMAIN=${B_DOMAIN:-$(cat $MANIFEST | grep domain: | awk '{print $2}')}

# create the GREEN application
cf push $GREEN -f $MANIFEST -n $GREEN -p $app_folder
# ensure it starts
curl --fail --insecure -I "https://${GREEN}.${DOMAIN}"

# add the GREEN application to each BLUE route to be load-balanced
# TODO this output parsing seems a bit fragile...find a way to use more structured output
cf routes | tail -n +4 | grep $BLUE | awk '{print $3" -n "$2}' | xargs -n 3 cf map-route $GREEN

# cleanup
# TODO consider 'stop'-ing the BLUE instead of deleting it, so that depedencies are cached for next time
cf delete $BLUE -f
cf rename $GREEN $BLUE
cf delete-route $DOMAIN -n $GREEN -f
finally

echo "DONE"